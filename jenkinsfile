pipeline {
    agent any
    
    stages {
        stage('Build') {
            steps {
                script {
                    echo 'Stage 1: Build - Building the code using Maven.'
                    // If Maven is installed and configured
                    sh 'mvn clean package'
                }
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                script {
                    echo 'Stage 2: Running unit and integration tests using JUnit.'
                    // Ensure your tests are in place
                    sh 'mvn test'
                }
            }
        }
        stage('Code Analysis') {
            steps {
                script {
                    echo 'Stage 3: Analyzing code using SonarQube.'
                    // You must have SonarQube server configured and running
                    // Use the proper credentials and configuration for SonarQube
                    sh 'mvn sonar:sonar'
                }
            }
        }
        stage('Security Scan') {
            steps {
                script {
                    echo 'Stage 4: Running security scan using OWASP Dependency-Check.'
                    // Ensure OWASP Dependency-Check is installed and configured
                    sh 'dependency-check.sh --project projectName'
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                script {
                    echo 'Stage 5: Deploying to staging server.'
                    // Replace with actual deployment commands
                    sh 'ssh -i your-key.pem ec2-user@your-staging-server "deploy-staging.sh"'
                }
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                script {
                    echo 'Stage 6: Running integration tests on staging.'
                    // Replace with actual commands to run tests on staging server
                    sh 'ssh -i your-key.pem ec2-user@your-staging-server "run-integration-tests.sh"'
                }
            }
        }
        stage('Deploy to Production') {
            steps {
                script {
                    echo 'Stage 7: Deploying to production server.'
                    // Replace with actual production deployment commands
                    sh 'ssh -i your-key.pem ec2-user@your-production-server "deploy-production.sh"'
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline finished'
        }
        success {
            emailext (
                to: "nimeshmakevitage@gmail.com",
                subject: "Pipeline Successful: ${env.JOB_NAME} - Build #${env.BUILD_NUMBER}",
                body: "The pipeline ran successfully.",
                attachLog: true
            )
        }
        failure {
            emailext (
                to: "nimeshmakevitage@gmail.com",
                subject: "Pipeline Failed: ${env.JOB_NAME} - Build #${env.BUILD_NUMBER}",
                body: "The pipeline failed. Please check the logs.",
                attachLog: true
            )
        }
    }
}
