pipeline {
    agent any

    stages {
        stage('Checkout SCM') {
            steps {
                echo 'Checking out from SCM...'
                checkout scm
            }
        }
        stage('Build') {
            steps {
                echo 'Building the code using Maven...'
                // Make sure Maven is installed and available in the PATH
                sh 'mvn clean install'
            }
            post {
                success {
                    script {
                        def buildNumber = env.BUILD_NUMBER
                        mail to: 'nimeshmakevitage@gmail.com',
                             subject: "Build Successful: ${env.JOB_NAME} - Build #${buildNumber}",
                             body: "The build was successful!\n\nCheck the details at ${env.BUILD_URL}.",
                             attachLog: true
                    }
                }
                failure {
                    script {
                        def buildNumber = env.BUILD_NUMBER
                        mail to: 'nimeshmakevitage@gmail.com',
                             subject: "Build Failed: ${env.JOB_NAME} - Build #${buildNumber}",
                             body: "The build failed.\n\nCheck the details at ${env.BUILD_URL}.",
                             attachLog: true
                    }
                }
            }
        }
        stage('Unit and Integration Tests') {
            steps {
                echo 'Running unit and integration tests using JUnit...'
                // Example test command for JUnit
                sh 'mvn test'
            }
            post {
                success {
                    script {
                        def buildNumber = env.BUILD_NUMBER
                        mail to: 'nimeshmakevitage@gmail.com',
                             subject: "Unit and Integration Tests Successful: ${env.JOB_NAME} - Build #${buildNumber}",
                             body: "The tests were successful!\n\nCheck the details at ${env.BUILD_URL}.",
                             attachLog: true
                    }
                }
                failure {
                    script {
                        def buildNumber = env.BUILD_NUMBER
                        mail to: 'nimeshmakevitage@gmail.com',
                             subject: "Unit and Integration Tests Failed: ${env.JOB_NAME} - Build #${buildNumber}",
                             body: "The tests failed.\n\nCheck the details at ${env.BUILD_URL}.",
                             attachLog: true
                    }
                }
            }
        }
        stage('Code Analysis') {
            steps {
                echo 'Analyzing code using SonarQube...'
                // Example command for SonarQube
                sh 'sonar-scanner'
            }
        }
        stage('Security Scan') {
            steps {
                echo 'Performing security scan using OWASP Dependency-Check...'
                // Example security scan command for OWASP Dependency-Check
                sh 'dependency-check --project MyProject --scan ./'
            }
            post {
                success {
                    script {
                        def buildNumber = env.BUILD_NUMBER
                        mail to: 'nimeshmakevitage@gmail.com',
                             subject: "Security Scan Successful: ${env.JOB_NAME} - Build #${buildNumber}",
                             body: "The security scan was successful!\n\nCheck the details at ${env.BUILD_URL}.",
                             attachLog: true
                    }
                }
                failure {
                    script {
                        def buildNumber = env.BUILD_NUMBER
                        mail to: 'nimeshmakevitage@gmail.com',
                             subject: "Security Scan Failed: ${env.JOB_NAME} - Build #${buildNumber}",
                             body: "The security scan failed.\n\nCheck the details at ${env.BUILD_URL}.",
                             attachLog: true
                    }
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                echo 'Deploying to staging (e.g., AWS EC2 instance)...'
                // Add deployment commands here
            }
        }
        stage('Integration Tests on Staging') {
            steps {
                echo 'Running integration tests on staging...'
                // Add integration testing commands here
            }
        }
        stage('Deploy to Production') {
            steps {
                echo 'Deploying to production (e.g., AWS EC2 instance)...'
                // Add production deployment commands here
            }
        }
    }

    post {
        success {
            script {
                def buildNumber = env.BUILD_NUMBER
                mail to: 'nimeshmakevitage@gmail.com',
                     subject: "Pipeline Successful: ${env.JOB_NAME} - Build #${buildNumber}",
                     body: "The pipeline completed successfully!\n\nCheck the details at ${env.BUILD_URL}.",
                     attachLog: true
            }
        }
        failure {
            script {
                def buildNumber = env.BUILD_NUMBER
                mail to: 'nimeshmakevitage@gmail.com',
                     subject: "Pipeline Failed: ${env.JOB_NAME} - Build #${buildNumber}",
                     body: "The pipeline failed.\n\nCheck the details at ${env.BUILD_URL}.",
                     attachLog: true
            }
        }
        unstable {
            script {
                def buildNumber = env.BUILD_NUMBER
                mail to: 'nimeshmakevitage@gmail.com',
                     subject: "Pipeline Unstable: ${env.JOB_NAME} - Build #${buildNumber}",
                     body: "The pipeline is unstable.\n\nCheck the details at ${env.BUILD_URL}.",
                     attachLog: true
            }
        }
    }
}
